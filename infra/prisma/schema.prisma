generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PhotoKind {
  BEFORE
  AFTER
  INCIDENT
  SIGNATURE
}

enum AttendanceType {
  TRAVEL_START
  ARRIVE
  CLOCK_IN
  BREAK
  CLOCK_OUT
}

enum XeroSyncStatus {
  CONNECTED
  SYNCING
  ERROR
  DISCONNECTED
}

enum EviaSignStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  COMPLETED
  EXPIRED
  CANCELLED
  DECLINED
}

model Worker {
  id                  String                @id @default(cuid())
  email               String                @unique
  passwordHash        String
  name                String
  role                String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  assignments         JobAssignment[]
  attendances         Attendance[]
  tasks               TaskItem[]
  photos              ProofPhoto[]
  signoffs            Signoff[]
  incidents           Incident[]
  payrollCalcs        PayrollCalc[]
  syncEvents          SyncEvent[]
  analyticsSnapshots  AnalyticsSnapshot[]
  workerLocations     WorkerLocation[]
}

model Site {
  id        String  @id @default(cuid())
  name      String
  address   String
  timezone  String
  jobs      Job[]
}

model Job {
  id              String              @id @default(cuid())
  siteId          String
  site            Site                @relation(fields: [siteId], references: [id])
  title           String
  description     String?
  scheduledDate   DateTime
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  assignments     JobAssignment[]
  attendances     Attendance[]
  tasks           TaskItem[]
  photos          ProofPhoto[]
  signoff         Signoff?
  incidents       Incident[]
  payrollCalcs    PayrollCalc[]
  eviaSignDocs    EviaSignDocument[]
  workerLocations WorkerLocation[]
}

model JobAssignment {
  id       String @id @default(cuid())
  jobId    String
  workerId String
  job      Job    @relation(fields: [jobId], references: [id])
  worker   Worker @relation(fields: [workerId], references: [id])
}

model Attendance {
  id         String          @id @default(cuid())
  jobId      String
  workerId   String
  type       AttendanceType
  occurredAt DateTime
  coordinates Json?
  note       String?
  job        Job            @relation(fields: [jobId], references: [id])
  worker     Worker         @relation(fields: [workerId], references: [id])
}

model TaskItem {
  id        String   @id @default(cuid())
  jobId     String
  workerId  String
  title     String
  notes     String?
  completed Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  job       Job       @relation(fields: [jobId], references: [id])
  worker    Worker    @relation(fields: [workerId], references: [id])
}

model ProofPhoto {
  id        String    @id @default(cuid())
  jobId     String
  workerId  String
  kind      PhotoKind
  objectKey String
  hash      String
  note      String?
  createdAt DateTime   @default(now())
  job       Job        @relation(fields: [jobId], references: [id])
  worker    Worker     @relation(fields: [workerId], references: [id])
}

model Signoff {
  id           String   @id @default(cuid())
  jobId        String   @unique
  workerId     String
  clientName   String
  clientRole   String
  signedAt     DateTime
  signatureKey String
  job          Job      @relation(fields: [jobId], references: [id])
  worker       Worker   @relation(fields: [workerId], references: [id])
}

model Incident {
  id          String   @id @default(cuid())
  jobId       String
  workerId    String
  occurredAt  DateTime
  description String
  actionTaken String?
  job         Job      @relation(fields: [jobId], references: [id])
  worker      Worker   @relation(fields: [workerId], references: [id])
}

model PayrollCalc {
  id         String   @id @default(cuid())
  jobId      String
  workerId   String
  totalHours Float
  totalPay   Float
  timezone   String
  breakdown  Json
  createdAt  DateTime @default(now())
  job        Job      @relation(fields: [jobId], references: [id])
  worker     Worker   @relation(fields: [workerId], references: [id])
}

model SyncEvent {
  id         String   @id @default(cuid())
  workerId   String
  type       String
  occurredAt DateTime
  payload    String
  createdAt  DateTime @default(now())
  worker     Worker   @relation(fields: [workerId], references: [id])
}

// Xero Integration Models
model XeroIntegration {
  id             String         @id @default(cuid())
  tenantId       String         @unique // Xero organisation ID
  accessToken    String         // Encrypted
  refreshToken   String         // Encrypted
  expiresAt      DateTime
  lastSyncAt     DateTime?
  syncStatus     XeroSyncStatus
  payrollMapping Json           // Map pay types to Xero items
  expenseMapping Json?
  taxMapping     Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  syncLogs       XeroSyncLog[]
}

model XeroSyncLog {
  id            String          @id @default(cuid())
  integrationId String
  integration   XeroIntegration @relation(fields: [integrationId], references: [id])
  syncType      String          // 'payroll', 'invoice', 'expense'
  status        String          // 'success', 'failed', 'partial'
  recordsSynced Int             @default(0)
  errorMessage  String?
  metadata      Json?
  createdAt     DateTime        @default(now())
}

// Evia Sign Integration Models
model EviaSignDocument {
  id               String         @id @default(cuid())
  jobId            String?
  job              Job?           @relation(fields: [jobId], references: [id])
  eviaDocId        String         @unique // Evia Sign document ID
  status           EviaSignStatus
  documentType     String         // 'completion_report', 'invoice', 'contract'
  recipientEmail   String
  recipientName    String
  pdfUrl           String?
  signedPdfUrl     String?
  sentAt           DateTime?
  viewedAt         DateTime?
  signedAt         DateTime?
  webhookEvents    Json?
  fallbackUsed     Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model EviaSignTemplate {
  id             String   @id @default(cuid())
  name           String
  eviaTemplateId String?  // Evia Sign template ID (if using Evia templates)
  documentType   String   // 'completion_report', 'invoice', 'contract'
  templateData   Json     // Template configuration
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Job Template Models
model JobTemplate {
  id              String         @id @default(cuid())
  name            String
  category        String         // 'commercial', 'residential', 'specialized'
  description     String?
  estimatedHours  Float?
  basePrice       Float?
  active          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  taskTemplates   TaskTemplate[]
}

model TaskTemplate {
  id               String      @id @default(cuid())
  jobTemplateId    String
  jobTemplate      JobTemplate @relation(fields: [jobTemplateId], references: [id])
  title            String
  description      String?
  estimatedMinutes Int?
  required         Boolean     @default(false)
  orderIndex       Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

// Analytics Models for Manager Dashboard
model AnalyticsSnapshot {
  id               String   @id @default(cuid())
  date             DateTime @db.Date
  workerId         String?
  worker           Worker?  @relation(fields: [workerId], references: [id])
  
  jobsCompleted    Int
  hoursWorked      Float
  overtimeHours    Float
  efficiencyScore  Float
  qualityScore     Float?
  revenueGenerated Float
  laborCost        Float
  
  createdAt        DateTime @default(now())
  
  @@index([date, workerId])
}

model WorkerLocation {
  id          String   @id @default(cuid())
  workerId    String
  worker      Worker   @relation(fields: [workerId], references: [id])
  jobId       String?
  job         Job?     @relation(fields: [jobId], references: [id])
  latitude    Float
  longitude   Float
  accuracy    Float
  timestamp   DateTime
  
  @@index([workerId, timestamp])
}
